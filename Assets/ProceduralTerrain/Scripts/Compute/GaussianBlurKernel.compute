// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture

RWStructuredBuffer<float> kernel;
float radius;
int size;

const float PI = 3.1415927;

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    float sigma = radius / 3.0f;
    float twoSigmaSquared = 2 * sigma * sigma;
    float oneOver2PiSigmaSquared = 1.0f / (2 * PI * sigma * sigma);
    float total = 0;

    for (int i = -radius; i <= radius; i++)
    {
        for (int j = -radius; j <= radius; j++)
        {
            float exponent = (i * i + j * j) / twoSigmaSquared;
            kernel[(size * (i + radius)) + (j + radius)] = oneOver2PiSigmaSquared * exp(-exponent);
            total += kernel[(size * (i + radius)) + (j + radius)];
        }
    }

    for (int i = 0; i < size; i++)
    {
        for (int j = 0; j < size; j++)
        {
            kernel[(size * i) + j] /= total;
        }
    }
}
